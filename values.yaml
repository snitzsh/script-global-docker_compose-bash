# Default values for docker-compose.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# NOTE:
#  - .private images assumes that exist in for snitzsh
#    how ever if you set .apps to `xxx`, the folders must
#    exits in git and folder structure.

#
# TODO:
#   - Make _main-fastify and rust, vue to be re-usable templates,
#     currently what we have cannot be re-used if we create new apps.
#   - Make sure you throw an error if other component is unsing the same port
#   - use docker secret volume to pass the password.
#   - create volumes with the new name standard in main.sh, before it builds
#     the docker-compose.yml
#   - for private images handle the tags dinamically on build only and run
#     locally
#   - For private image handle local/

docker_compose_version: "TODO"

# IMPORRANT:
#   - name cannot have the same name as software, utility, project.
apps:
  - global
  - snitzsh
  - test
#
# NOTE:
#   - if `merge_apps: true`, it will use this name for the apps. in docker desktop
#
default_app_name: platform
#
# TODO:
#   - support this prop
#
# NOTE:
#   - user that executed this scripts: gitlab pipeline
#
user: ""

domain: "com.docker.compose"
#
# NOTE:
#   - true : it build the image only.
#   - false : it creates a container.
#
image_only: false
#
# NOTE:
#   - if `true`, it create one document in docker-compose.yaml
#     else will create multiple.
#
merge_apps: false
#
# TODO:
#   - Support multi registries
#
registries:
  - docker # local (desktop) or remote (based on cluster_type)
  - harbor
  - aws
#
# TODO:
#   - in boilerplate get the architecture by running this command: `docker version`
#     look for the Server: OS/Arch
#   - Do we need this for public images?
platform: "linux/arm64" # otherlinux: `linux/amd64` | mac m*: `linux/arm64`

#
#  TODO:
#   - make sure the Dockerfile will set label to document how to use
#       CLUSTER_NAME, CLUSTER_TYPE.
#     This are only for local testing. When building the image for a real cluster
#     `labels` shouldn't be attach to the image.
#
env:
  cluster_name: dev
  cluster_type: local

components:
  # software_type
  public:
    # utility_name
    dbs:
      # app_name
      snitzsh:
        postgres:
          enabled: true
          template: ""
          tag: latest
          depends_on: []
      test:
        postgres:
          enabled: false
          template: ""
          tag: latest
          depends_on: []
    db-uis:
      snitzsh:
        pgadmin4:
          enabled: true
          template: ""
          tag: latest
          depends_on:
            - public.dbs.snitzsh.postgres
      test:
        pgadmin4:
          enabled: false
          template: ""
          tag: latest
          depends_on:
            - public.dbs.test.postgres
    cache-dbs:
      snitzsh:
        redis:
          enabled: true
          template: ""
          tag: latest
          depends_on: []
    cache-db-uis:
      snitzsh:
        redisinsight:
          enabled: true
          template: ""
          tag: latest
          depends_on:
            - public.cache-dbs.snitzsh.redis
      test:
        redisinsight:
          enabled: false
          template: ""
          tag: latest
          depends_on:
            - public.cache-dbs.snitzsh.redis

  private:
    scripts:
      global:
        machine_set_up-bash:
          enabled: true
          template: "operating-systems"
          images:
            - name: ubuntu
              tag: latest
    apis:
      snitzsh:
        main-rust:
          enabled: true
          template: ""
          # images: []
          path: "../../../"
          tag: "latest"
          _workdir: /app
          target: "dev-stage" # dockerfile stage
          # TODO:
          #  - findout if .cargo/config.toml is equivalent to package.json in node
          #    maybe for rust is not neccesary.
          target_script: "dev"
          host: "0.0.0.0"
          port: "3000" # this will be dynamic handled by helm
          depends_on:
            - public.dbs.snitzsh.postgres
            - public.cache-dbs.snitzsh.redis
      test:
        main-fastify:
          enabled: false
          template: ""
          # images: []
          # Path to the project inside ./snitzsh
          # (assuming you use boilerplate to pull repositories)
          path: "../../../"
          tag: "latest"
          _workdir: /app
          # opts: dev-stage, build-stage
          target: "dev-stage"
          # TODO:
          #  - findout if .cargo/config.toml is equivalent to package.json in node
          #    maybe for rust is not neccesary.
          target_script: "dev"
          host: "0.0.0.0"
          port: "3000" # this will be dynamic handled by helm
          depends_on:
            - public.dbs.test.postgres
            - public.cache-dbs.test.redis
    uis:
      snitzsh:
        main-vue:
          enabled: false
          template: ""
          # images: []
          path: "../../../"
          tag: "latest"
          _workdir: /app
          target: "dev-stage" # dockerfile stage
          target_script: "dev" # .scripts{} in package.json
          host: "0.0.0.0"
          port: "8080" # this will be dynamic handled by helm
          depends_on: # in case it depends on other component.
            - private.apis.snitzsh.main-rust
      test:
        main-vue:
          enabled: false
          template: ""
          # images: []
          path: "../../../"
          tag: "latest"
          _workdir: /app
          target: "dev-stage" # dockerfile stage
          target_script: "dev" # .scripts{} in package.json
          host: "0.0.0.0"
          port: "8080" # this will be dynamic handled by helm
          depends_on: # in case it depends on other component.
            - private.apis.test.main-fastify
#
# NOTE:
#   - it will take effect it .image_only=false
#
docker:
  volumes: true
  networks: true

#
# TODO:
#   - support this to get user from remote or .env file
#
# IMPORTANT:
#   - when changing the auth, make sure to do `docker system prune --all --force`
#     otherwise it will cache the old auth or other configs. Remove volumes/
#
# NOTE:
#   - Mainly for `local` development: redis, redisinsight, postgres, pgadmin4
#
auth:
  email: 'root@snitzsh.com'
  username: 'root'
  password: 'root'
