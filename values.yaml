# Default values for docker-compose.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#
# TODO:
# - Make sure you throw an error if other component is unsing the same port
# - use docker secret volume to pass the password.
# - findout why can't I use `-` , right now I am using `_` as .components[].this_key
# - create volumes with the new name standard in main.sh, before it builds
#   the docker-compose.yml
# - for private images handle the tags dinamically on build only and run locally
# - For private image handle local/
#
apps:
  - snitzsh

# TODO:
# Support multi registries
registries:
  - docker
  - aws

# TODO:
#   - in boilerplate get the architecture by running this command: `docker version`
#     look for the Server: OS/Arch
#   - Do we need this for public images?
platform: "linux/arm64" # otherlinux: `linux/amd64` | mac m*: `linux/arm64`

env:
  cluster_name: dev
  cluster_type: local

components:
  public:
    dbs:
      postgres:
        enabled: true
        tag: latest
    db-uis:
      pgadmin4:
        enabled: true
        tag: latest
    cache-dbs:
      redis:
        enabled: true
        tag: latest
    cache-db-uis:
      redisinsight:
        enabled: true
        tag: latest
  private:
    apis:
      main-fastify:
        enabled: false
        path: "../../../"
        _workdir: /app
        target: "dev-stage" # dockerfile stage
        # TODO:
        #  - findout if .cargo/config.toml is equivalent to package.json in node
        #    maybe for rust is not neccesary.
        target_script: "dev"
        host: "0.0.0.0"
        port: "3000" # this will be dynamic handled by helm
      main-rust:
        enabled: false
        path: "../../../"
        _workdir: /app
        target: "dev-stage" # dockerfile stage
        # TODO:
        #  - findout if .cargo/config.toml is equivalent to package.json in node
        #    maybe for rust is not neccesary.
        target_script: "dev"
        host: "0.0.0.0"
        port: "3000" # this will be dynamic handled by helm
    uis:
      main-vue:
        enabled: false
        path: "../../../"
        _workdir: /app
        target: "dev-stage" # dockerfile stage
        target_script: "dev" # .scripts{} in package.json
        host: "0.0.0.0"
        port: "8080" # this will be dynamic handled by helm

docker:
  volumes: true
  networks: true

# TODO:
# - do we need this???
# All Microservice API will be dynamically place here... if empty it will
# do `monolithic` build
front-end:
  customer-facing: true
  admin-portal: true

#
# IMPORTANT:
#   - when changing the auth, make sure to do `docker system prune --all --force`
#     otherwise it will cache the old auth or other configs. Remove volumes/
#
# NOTE:
#   - Mainly for `local` development: redis, redisinsight, postgres, pgadmin4
auth:
  email: 'root@snitzsh.com'
  username: 'root'
  password: 'root'
